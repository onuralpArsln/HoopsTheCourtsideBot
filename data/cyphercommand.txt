// CONSTRAINTS
CREATE CONSTRAINT unique_team IF NOT EXISTS FOR (t:Team) REQUIRE t.id IS UNIQUE;
CREATE CONSTRAINT unique_player IF NOT EXISTS FOR (p:Player) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT unique_match IF NOT EXISTS FOR (m:Match) REQUIRE m.id IS UNIQUE;

// CREATE VECTOR INDEX FOR MATCH SUMMARIES
CREATE VECTOR INDEX matchSummaries IF NOT EXISTS
FOR (m:Match) ON (m.summary_embedding)
OPTIONS {
  indexConfig: {
    `vector.dimensions`: 1536,
    `vector.similarity_function`: 'cosine'
  }
};

// LOAD TEAMS
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/onuralpArsln/HoopsTheCourtsideBot/main/data/teams.csv' AS row
WITH row WHERE row.team_id IS NOT NULL AND trim(row.team_id) <> ""
MERGE (t:Team {id: row.team_id})
SET t.name = row.team_name;

// LOAD PLAYERS
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/onuralpArsln/HoopsTheCourtsideBot/main/data/players.csv' AS row
WITH row WHERE row.player_id IS NOT NULL AND trim(row.player_id) <> ""
MATCH (t:Team {id: row.team_id})
MERGE (p:Player {id: row.player_id})
SET p.name = row.player_name
MERGE (p)-[:PLAYS_FOR]->(t);

// LOAD MATCHES
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/onuralpArsln/HoopsTheCourtsideBot/main/data/matches.csv' AS row
WITH row WHERE row.match_id IS NOT NULL AND trim(row.match_id) <> ""
MATCH (t1:Team {id: row.team1_id})
MATCH (t2:Team {id: row.team2_id})
MERGE (m:Match {id: row.match_id})
SET m.date = row.date,
    m.team1_score = toInteger(row.team1_score),
    m.team2_score = toInteger(row.team2_score),
    m.winner_team_id = row.winner_team_id
MERGE (t1)-[:PLAYED]->(m)
MERGE (t2)-[:PLAYED]->(m)
FOREACH (_ IN CASE WHEN row.winner_team_id = row.team1_id THEN [1] ELSE [] END |
    MERGE (t1)-[:WON]->(m)
    MERGE (t2)-[:LOST]->(m)
)
FOREACH (_ IN CASE WHEN row.winner_team_id = row.team2_id THEN [1] ELSE [] END |
    MERGE (t2)-[:WON]->(m)
    MERGE (t1)-[:LOST]->(m)
);

// LOAD MATCH SUMMARIES
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/onuralpArsln/HoopsTheCourtsideBot/main/data/match_summaries.csv' AS row
WITH row WHERE row.match_id IS NOT NULL AND trim(row.match_id) <> ""
MATCH (m:Match {id: row.match_id})
SET m.summary = row.summary,
    m.summary_embedding = row.summary_embedding;

// LOAD PLAYER SCORES
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/onuralpArsln/HoopsTheCourtsideBot/main/data/player_scores.csv' AS row
WITH row WHERE row.match_id IS NOT NULL AND row.player_id IS NOT NULL
MATCH (p:Player {id: row.player_id})
MATCH (m:Match {id: row.match_id})
MERGE (p)-[:SCORED {points: toInteger(row.points_scored)}]->(m);